from math import e
from math import floor
from numpy import roots
from numpy import array
from numpy import imag
from numpy import real

k = 1.380649*(10**(-23))

# Note this method is looking at the paper:
# Journal of Crystal Growth
# Volume 110, Issues 1â€“2, 1 March 1991, Pages 60-65
# Journal of Crystal Growth
# Estimation of the initial equilibrium constants in the formation of tetragonal lysozyme nuclei
# Marc Lee Pusey
#def calc_mol_dist(deltaMu, T):
    #concentration = (e ** (deltaMu/(k*T))) * 10000
    #solns = roots(array([2700000000000, 0, 30000, 1, -concentration]))
    #poss = [x.real for x in solns if (x.imag == 0 and x.real > 0)]
    #dist = [poss[0], 30000*(poss[0] ** 2), 2700000000000 * (poss[0] ** 4)]
    #return [x/sum(dist) for x in dist]
    #return [0.5, 0.5, 0]

# This function is using the Ke et al results.
k = 1.380649*(10**(-23))

def calc_mol_dist(deltaMu, T):
    data = "0, 0.4659495696313704:0.9999999091738832, 0.6182790525699826:1.9857143233422478, 0.7347667867965936:2.9857142325161314, 0.8243725258516676:3.999999636695531, 0.9139782649067418:4.9999995458694135, 0.985663129605815:5.985713960037779, 1.0394264363113526:6.985713869211662, 1.0842293058388897:7.999999273391061, 1.1379926125444273:8.985713687559427, 1.1648746077159633:9.98571359673331, 1.2007163564279646:10.985713505907192, 1.218637914421501:12, 1.245518884136734:0, 0:0.9999999091738832, 0.6899639172690558:1.9999998183477656, 1.1021501801948905:2.9999997275216495, 1.3978493925316493:3.985714141690014, 1.630824177347335:4.9999995458694135, 1.801075218279483:5.999999455043295, 1.9534050430368628:6.985713869211662, 2.0967740887974737:7.999999273391061, 2.213261481205317:8.985713687559427, 2.3207884364351594:9.98571359673331, 2.4193546126682337:10.985713505907192, 2.508960351723308:11.985713415081074, 2.5896056536003815:0, 0:1.0142854041794, 0.16128992011661197:1.9999998183477656, 0.3405013982267603:2.9999997275216495, 0.5376344343304449:3.999999636695531, 0.7795696563241307:4.9999995458694135, 1.0573473106673537:5.999999455043295, 1.3799274927193452:6.999999364217179, 1.7383504489396417:7.999999273391061, 2.141576958325011:8.985713687559427, 2.6433689603059194:9.98571359673331, 3.1899641736331326:10.985713505907192, 3.84408600037142:11.971426830162152, 4.569892179080629".split(":")
    split_data = [data[0:13], data[13:26], data[26:39]]
    dist = [float(str(split_data[0][floor(deltaMu/(k*T))]).split(", ")[1]), float(str(split_data[1][floor(deltaMu/(k*T))]).split(", ")[1]), float(str(split_data[2][floor(deltaMu/(k*T))]).split(", ")[1])]
    summ = sum(dist)
    return [dist[0]/summ, dist[1]/summ, dist[2]/summ]

#def calc_mol_dist(deltaMu, T):
#    data = "0, 0.4659495696313704:0.9999999091738832, 0.6182790525699826:1.9857143233422478, 0.7347667867965936:2.9857142325161314, 0.8243725258516676:3.999999636695531, 0.9139782649067418:4.9999995458694135, 0.985663129605815:5.985713960037779, 1.0394264363113526:6.985713869211662, 1.0842293058388897:7.999999273391061, 1.1379926125444273:8.985713687559427, 1.1648746077159633:9.98571359673331, 1.2007163564279646:10.985713505907192, 1.218637914421501:12, 1.245518884136734:0, 0:0.9999999091738832, 0.6899639172690558:1.9999998183477656, 1.1021501801948905:2.9999997275216495, 1.3978493925316493:3.985714141690014, 1.630824177347335:4.9999995458694135, 1.801075218279483:5.999999455043295, 1.9534050430368628:6.985713869211662, 2.0967740887974737:7.999999273391061, 2.213261481205317:8.985713687559427, 2.3207884364351594:9.98571359673331, 2.4193546126682337:10.985713505907192, 2.508960351723308:11.985713415081074, 2.5896056536003815:0, 0:1.0142854041794, 0.16128992011661197:1.9999998183477656, 0.3405013982267603:2.9999997275216495, 0.5376344343304449:3.999999636695531, 0.7795696563241307:4.9999995458694135, 1.0573473106673537:5.999999455043295, 1.3799274927193452:6.999999364217179, 1.7383504489396417:7.999999273391061, 2.141576958325011:8.985713687559427, 2.6433689603059194:9.98571359673331, 3.1899641736331326:10.985713505907192, 3.84408600037142:11.971426830162152, 4.569892179080629".split(":")
#    split_data = [data[0:13], data[13:26], data[26:39]]
#    dist = [float(str(split_data[0][floor(deltaMu/(k*T))]).split(", ")[1]), float(str(split_data[1][floor(deltaMu/(k*T))]).split(", ")[1]), float(str(split_data[2][floor(deltaMu/(k*T))]).split(", ")[1])]
#    summ = sum(dist)
#    return [dist[0]/summ, (dist[1]+dist[2])/(2*summ), (dist[1]+dist[2])/(2*summ)]